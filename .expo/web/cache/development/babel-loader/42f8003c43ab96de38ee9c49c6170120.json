{"ast":null,"code":"var API_URL = 'http://localhost:4000';\nvar SIGN_IN = 'mutation($username:String!, $password:String!){signIn(username:$username, password:$password)}';\nvar SIGN_UP = 'mutation($username:String!, $password:String!){signUp(username:$username, password:$password)}';\nvar CREATE_TASK_LISTS = 'mutation($id:String!, $title:String!){createTaskLists(input:{title:$title, owner:{connect:{where:{id:$id}}}})}';\nvar CREATE_TASK = 'mutation($taskListID:ID,$taskName:String){createTasks(input:{content:$taskName, done:false, belongsTo:{connect:{where:{id:$taskListID}}}})';\nvar DELETE_TASK_LISTS = 'mutation()';\nvar DELETE_TASK = 'mutation()';\nvar TASKLIST = 'query taskLists($username: String!) {taskLists(where: { owner: { username: $username } }) {id title}}';\nexport function signIn(username, password) {\n  return fetch(API_URL, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      query: SIGN_IN,\n      variables: {\n        username: username,\n        password: password\n      }\n    })\n  }).then(function (response) {\n    return response.json();\n  }).then(function (jsonResponse) {\n    if (jsonResponse.errors != null) {\n      throw jsonResponse.errors[0];\n    }\n\n    return jsonResponse.data.signIn;\n  }).catch(function (error) {\n    throw error;\n  });\n}\nexport function signUp(username, password) {\n  return fetch(API_URL, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      query: SIGN_UP,\n      variables: {\n        username: username,\n        password: password\n      }\n    })\n  }).then(function (response) {\n    return response.json();\n  }).then(function (jsonResponse) {\n    if (jsonResponse.errors != null) {\n      throw jsonResponse.errors[0];\n    }\n\n    return jsonResponse.data.signUp;\n  }).catch(function (error) {\n    throw error;\n  });\n}\nexport function createTaskLists(taskListId, taskName, token) {\n  return fetch(API_URL, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + token\n    },\n    body: JSON.stringify({\n      query: CREATE_TASK_LISTS,\n      variables: {\n        id: id,\n        title: title\n      }\n    })\n  }).then(function (response) {\n    return response.json();\n  }).then(function (jsonResponse) {\n    if (jsonResponse.errors != null) {\n      throw jsonResponse.errors[0];\n    }\n\n    return jsonResponse.data.createTaskLists;\n  }).catch(function (error) {\n    throw error;\n  });\n}\nexport function createTask(taskId, taskName) {\n  return fetch(API_URL, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      query: CREATE_TASK,\n      variables: {\n        taskId: taskId,\n        taskName: taskName\n      }\n    })\n  }).then(function (response) {\n    return response.json();\n  }).then(function (jsonResponse) {\n    if (jsonResponse.errors != null) {\n      throw jsonResponse.errors[0];\n    }\n\n    return jsonResponse.data.createTask;\n  }).catch(function (error) {\n    throw error;\n  });\n}\nexport function getTaskList(username, token) {\n  return fetch(API_URL, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': \"Bearer \" + token\n    },\n    body: JSON.stringify({\n      query: TASKLIST,\n      variables: {\n        username: username\n      }\n    })\n  }).then(function (response) {\n    return response.json();\n  }).then(function (jsonResponse) {\n    if (jsonResponse.errors != null) {\n      throw jsonResponse.errors[0];\n    }\n\n    return jsonResponse.data.taskLists;\n  }).catch(function (error) {\n    throw error;\n  });\n}","map":{"version":3,"names":["API_URL","SIGN_IN","SIGN_UP","CREATE_TASK_LISTS","CREATE_TASK","DELETE_TASK_LISTS","DELETE_TASK","TASKLIST","signIn","username","password","fetch","method","headers","body","JSON","stringify","query","variables","then","response","json","jsonResponse","errors","data","catch","error","signUp","createTaskLists","taskListId","taskName","token","id","title","createTask","taskId","getTaskList","taskLists"],"sources":["C:/Users/Miste/OneDrive/Documents/Travail/Master/M2/IHM - Visu Donnees/ihm-visu-donnees/API/todoAPI.js"],"sourcesContent":["const API_URL = 'http://localhost:4000'\r\n\r\nconst SIGN_IN =\r\n  'mutation($username:String!, $password:String!){signIn(username:$username, password:$password)}'\r\n\r\nconst SIGN_UP =\r\n  'mutation($username:String!, $password:String!){signUp(username:$username, password:$password)}'\r\n\r\nconst CREATE_TASK_LISTS =\r\n  'mutation($id:String!, $title:String!){createTaskLists(input:{title:$title, owner:{connect:{where:{id:$id}}}})}'\r\n\r\nconst CREATE_TASK = \r\n  'mutation($taskListID:ID,$taskName:String){createTasks(input:{content:$taskName, done:false, belongsTo:{connect:{where:{id:$taskListID}}}})'\r\n\r\nconst DELETE_TASK_LISTS  =\r\n  'mutation()'\r\n\r\nconst DELETE_TASK =\r\n  'mutation()'\r\n\r\nconst TASKLIST = \r\n  'query taskLists($username: String!) {taskLists(where: { owner: { username: $username } }) {id title}}'\r\n\r\n\r\nexport function signIn (username, password) {\r\n  return fetch(API_URL, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({\r\n      query: SIGN_IN,\r\n      variables: {\r\n        username: username,\r\n        password: password\r\n      }\r\n    })\r\n  })\r\n    .then(response => {\r\n      return response.json()\r\n    })\r\n    .then(jsonResponse => {\r\n      if (jsonResponse.errors != null) {\r\n        throw jsonResponse.errors[0]\r\n      }\r\n      return jsonResponse.data.signIn\r\n    })\r\n    .catch(error => {\r\n      throw error\r\n    })\r\n}\r\n\r\nexport function signUp (username, password) {\r\n  return fetch(API_URL, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({\r\n      query: SIGN_UP,\r\n      variables: {\r\n        username: username,\r\n        password: password\r\n      }\r\n    })\r\n  })\r\n    .then(response => {\r\n      return response.json()\r\n    })\r\n    .then(jsonResponse => {\r\n      if (jsonResponse.errors != null) {\r\n        throw jsonResponse.errors[0]\r\n      }\r\n      return jsonResponse.data.signUp\r\n    })\r\n    .catch(error => {\r\n      throw error\r\n    })\r\n}\r\n\r\nexport function createTaskLists(taskListId, taskName, token) {\r\n  return fetch(API_URL, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Authorization' : 'Bearer ' + token\r\n    },\r\n    body: JSON.stringify({\r\n      query: CREATE_TASK_LISTS,\r\n      variables: {\r\n        id: id,\r\n        title: title\r\n      }\r\n    })\r\n  })\r\n    .then(response => {\r\n      return response.json()\r\n    })\r\n    .then(jsonResponse => {\r\n      if (jsonResponse.errors != null) {\r\n        throw jsonResponse.errors[0]\r\n      }\r\n      return jsonResponse.data.createTaskLists\r\n    })\r\n    .catch(error => {\r\n      throw error\r\n    })\r\n}\r\n\r\nexport function createTask(taskId, taskName) {\r\n  return fetch(API_URL, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({\r\n      query: CREATE_TASK,\r\n      variables: {\r\n        taskId: taskId,\r\n        taskName: taskName\r\n      }\r\n    })\r\n  })\r\n    .then(response => {\r\n      return response.json()\r\n    })\r\n    .then(jsonResponse => {\r\n      if (jsonResponse.errors != null) {\r\n        throw jsonResponse.errors[0]\r\n      }\r\n      return jsonResponse.data.createTask\r\n    })\r\n    .catch(error => {\r\n      throw error\r\n    })\r\n}\r\n\r\nexport function getTaskList (username,token){\r\n  return fetch(API_URL, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': \"Bearer \"+token\r\n    },\r\n    body: JSON.stringify({\r\n      query: TASKLIST,\r\n      variables: {\r\n        username: username\r\n      }\r\n    })\r\n  })\r\n  .then(response => {\r\n    return response.json()\r\n  })\r\n  .then(jsonResponse => {\r\n    if (jsonResponse.errors != null) {\r\n      throw jsonResponse.errors[0]\r\n    }\r\n    return jsonResponse.data.taskLists\r\n  })\r\n  .catch(error => {\r\n    throw error\r\n  })\r\n}"],"mappings":"AAAA,IAAMA,OAAO,GAAG,uBAAhB;AAEA,IAAMC,OAAO,GACX,gGADF;AAGA,IAAMC,OAAO,GACX,gGADF;AAGA,IAAMC,iBAAiB,GACrB,gHADF;AAGA,IAAMC,WAAW,GACf,4IADF;AAGA,IAAMC,iBAAiB,GACrB,YADF;AAGA,IAAMC,WAAW,GACf,YADF;AAGA,IAAMC,QAAQ,GACZ,uGADF;AAIA,OAAO,SAASC,MAAT,CAAiBC,QAAjB,EAA2BC,QAA3B,EAAqC;EAC1C,OAAOC,KAAK,CAACX,OAAD,EAAU;IACpBY,MAAM,EAAE,MADY;IAEpBC,OAAO,EAAE;MACP,gBAAgB;IADT,CAFW;IAKpBC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;MACnBC,KAAK,EAAEhB,OADY;MAEnBiB,SAAS,EAAE;QACTT,QAAQ,EAAEA,QADD;QAETC,QAAQ,EAAEA;MAFD;IAFQ,CAAf;EALc,CAAV,CAAL,CAaJS,IAbI,CAaC,UAAAC,QAAQ,EAAI;IAChB,OAAOA,QAAQ,CAACC,IAAT,EAAP;EACD,CAfI,EAgBJF,IAhBI,CAgBC,UAAAG,YAAY,EAAI;IACpB,IAAIA,YAAY,CAACC,MAAb,IAAuB,IAA3B,EAAiC;MAC/B,MAAMD,YAAY,CAACC,MAAb,CAAoB,CAApB,CAAN;IACD;;IACD,OAAOD,YAAY,CAACE,IAAb,CAAkBhB,MAAzB;EACD,CArBI,EAsBJiB,KAtBI,CAsBE,UAAAC,KAAK,EAAI;IACd,MAAMA,KAAN;EACD,CAxBI,CAAP;AAyBD;AAED,OAAO,SAASC,MAAT,CAAiBlB,QAAjB,EAA2BC,QAA3B,EAAqC;EAC1C,OAAOC,KAAK,CAACX,OAAD,EAAU;IACpBY,MAAM,EAAE,MADY;IAEpBC,OAAO,EAAE;MACP,gBAAgB;IADT,CAFW;IAKpBC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;MACnBC,KAAK,EAAEf,OADY;MAEnBgB,SAAS,EAAE;QACTT,QAAQ,EAAEA,QADD;QAETC,QAAQ,EAAEA;MAFD;IAFQ,CAAf;EALc,CAAV,CAAL,CAaJS,IAbI,CAaC,UAAAC,QAAQ,EAAI;IAChB,OAAOA,QAAQ,CAACC,IAAT,EAAP;EACD,CAfI,EAgBJF,IAhBI,CAgBC,UAAAG,YAAY,EAAI;IACpB,IAAIA,YAAY,CAACC,MAAb,IAAuB,IAA3B,EAAiC;MAC/B,MAAMD,YAAY,CAACC,MAAb,CAAoB,CAApB,CAAN;IACD;;IACD,OAAOD,YAAY,CAACE,IAAb,CAAkBG,MAAzB;EACD,CArBI,EAsBJF,KAtBI,CAsBE,UAAAC,KAAK,EAAI;IACd,MAAMA,KAAN;EACD,CAxBI,CAAP;AAyBD;AAED,OAAO,SAASE,eAAT,CAAyBC,UAAzB,EAAqCC,QAArC,EAA+CC,KAA/C,EAAsD;EAC3D,OAAOpB,KAAK,CAACX,OAAD,EAAU;IACpBY,MAAM,EAAE,MADY;IAEpBC,OAAO,EAAE;MACP,gBAAgB,kBADT;MAEP,iBAAkB,YAAYkB;IAFvB,CAFW;IAMpBjB,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;MACnBC,KAAK,EAAEd,iBADY;MAEnBe,SAAS,EAAE;QACTc,EAAE,EAAEA,EADK;QAETC,KAAK,EAAEA;MAFE;IAFQ,CAAf;EANc,CAAV,CAAL,CAcJd,IAdI,CAcC,UAAAC,QAAQ,EAAI;IAChB,OAAOA,QAAQ,CAACC,IAAT,EAAP;EACD,CAhBI,EAiBJF,IAjBI,CAiBC,UAAAG,YAAY,EAAI;IACpB,IAAIA,YAAY,CAACC,MAAb,IAAuB,IAA3B,EAAiC;MAC/B,MAAMD,YAAY,CAACC,MAAb,CAAoB,CAApB,CAAN;IACD;;IACD,OAAOD,YAAY,CAACE,IAAb,CAAkBI,eAAzB;EACD,CAtBI,EAuBJH,KAvBI,CAuBE,UAAAC,KAAK,EAAI;IACd,MAAMA,KAAN;EACD,CAzBI,CAAP;AA0BD;AAED,OAAO,SAASQ,UAAT,CAAoBC,MAApB,EAA4BL,QAA5B,EAAsC;EAC3C,OAAOnB,KAAK,CAACX,OAAD,EAAU;IACpBY,MAAM,EAAE,MADY;IAEpBC,OAAO,EAAE;MACP,gBAAgB;IADT,CAFW;IAKpBC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;MACnBC,KAAK,EAAEb,WADY;MAEnBc,SAAS,EAAE;QACTiB,MAAM,EAAEA,MADC;QAETL,QAAQ,EAAEA;MAFD;IAFQ,CAAf;EALc,CAAV,CAAL,CAaJX,IAbI,CAaC,UAAAC,QAAQ,EAAI;IAChB,OAAOA,QAAQ,CAACC,IAAT,EAAP;EACD,CAfI,EAgBJF,IAhBI,CAgBC,UAAAG,YAAY,EAAI;IACpB,IAAIA,YAAY,CAACC,MAAb,IAAuB,IAA3B,EAAiC;MAC/B,MAAMD,YAAY,CAACC,MAAb,CAAoB,CAApB,CAAN;IACD;;IACD,OAAOD,YAAY,CAACE,IAAb,CAAkBU,UAAzB;EACD,CArBI,EAsBJT,KAtBI,CAsBE,UAAAC,KAAK,EAAI;IACd,MAAMA,KAAN;EACD,CAxBI,CAAP;AAyBD;AAED,OAAO,SAASU,WAAT,CAAsB3B,QAAtB,EAA+BsB,KAA/B,EAAqC;EAC1C,OAAOpB,KAAK,CAACX,OAAD,EAAU;IACpBY,MAAM,EAAE,MADY;IAEpBC,OAAO,EAAE;MACP,gBAAgB,kBADT;MAEP,iBAAiB,YAAUkB;IAFpB,CAFW;IAMpBjB,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;MACnBC,KAAK,EAAEV,QADY;MAEnBW,SAAS,EAAE;QACTT,QAAQ,EAAEA;MADD;IAFQ,CAAf;EANc,CAAV,CAAL,CAaNU,IAbM,CAaD,UAAAC,QAAQ,EAAI;IAChB,OAAOA,QAAQ,CAACC,IAAT,EAAP;EACD,CAfM,EAgBNF,IAhBM,CAgBD,UAAAG,YAAY,EAAI;IACpB,IAAIA,YAAY,CAACC,MAAb,IAAuB,IAA3B,EAAiC;MAC/B,MAAMD,YAAY,CAACC,MAAb,CAAoB,CAApB,CAAN;IACD;;IACD,OAAOD,YAAY,CAACE,IAAb,CAAkBa,SAAzB;EACD,CArBM,EAsBNZ,KAtBM,CAsBA,UAAAC,KAAK,EAAI;IACd,MAAMA,KAAN;EACD,CAxBM,CAAP;AAyBD"},"metadata":{},"sourceType":"module"}